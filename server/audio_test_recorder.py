#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Audio Test Recorder - Ghi √¢m test v√† l∆∞u WAV ƒë·ªÉ ki·ªÉm tra ch·∫•t l∆∞·ª£ng
S·ª≠ d·ª•ng ƒë·ªÉ diagnose v·∫•n ƒë·ªÅ Google Speech Recognition
"""

import socket
import struct
import threading
import time
import os
from datetime import datetime

# Import t·ª´ audio_utils package
from audio_utils import (
    audio_preprocessing_improved,
    transcribe_audio_with_google,
    save_audio_to_wav,
    save_transcription_to_txt,
    check_audio_dependencies,
    get_installation_commands
)

# ====== CONFIG ======
HOST = "0.0.0.0"
UDP_PORT = 5005
RECORDING_DURATION = 10.0  # Ghi √¢m 10 gi√¢y
OUTPUT_DIR = "test_recordings"  # Th∆∞ m·ª•c l∆∞u file test
SAMPLE_RATE = 16000
CHANNELS = 1
SAMPLE_WIDTH = 2  # 16-bit

# ====== NOISE REDUCTION CONFIG ======
# C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh c√°c th√¥ng s·ªë n√†y ƒë·ªÉ test
NOISE_REDUCTION_LEVEL = "medium"  # "light", "medium", "strong" - ƒê·ªïi t·ª´ "strong" sang "medium"
ENABLE_NOTCH_FILTER = True        # B·∫≠t/t·∫Øt notch filter
ENABLE_SMOOTHING = True           # B·∫≠t/t·∫Øt smoothing filter
ENABLE_FINAL_NOISE_REDUCTION = False  # T·∫Øt final noise reduction ƒë·ªÉ gi·ªØ gi·ªçng ng∆∞·ªùi

# ====== PRESET CONFIG ======
# C√°c preset ƒë·ªÉ test nhanh
PRESET = "voice_preserve"  # "voice_preserve", "noise_reduction", "original"

# Preset: Voice Preserve - Gi·ªØ gi·ªçng ng∆∞·ªùi, gi·∫£m noise v·ª´a ph·∫£i
if PRESET == "voice_preserve":
    NOISE_REDUCTION_LEVEL = "light"
    ENABLE_NOTCH_FILTER = True
    ENABLE_SMOOTHING = True
    ENABLE_FINAL_NOISE_REDUCTION = False
# Preset: Noise Reduction - Gi·∫£m noise m·∫°nh, c√≥ th·ªÉ m·∫•t gi·ªçng ng∆∞·ªùi
elif PRESET == "noise_reduction":
    NOISE_REDUCTION_LEVEL = "strong"
    ENABLE_NOTCH_FILTER = True
    ENABLE_SMOOTHING = True
    ENABLE_FINAL_NOISE_REDUCTION = True
# Preset: Original - √çt x·ª≠ l√Ω, gi·ªØ nguy√™n audio
elif PRESET == "original":
    NOISE_REDUCTION_LEVEL = "light"
    ENABLE_NOTCH_FILTER = False
    ENABLE_SMOOTHING = False
    ENABLE_FINAL_NOISE_REDUCTION = False

def udp_audio_recorder():
    """Ghi √¢m audio t·ª´ ESP32 qua UDP"""
    print(f"üéß UDP Audio Recorder ƒëang l·∫Øng nghe tr√™n {HOST}:{UDP_PORT}")
    print(f"‚è±Ô∏è S·∫Ω ghi √¢m {RECORDING_DURATION} gi√¢y khi ph√°t hi·ªán speech")
    print(f"üìÅ L∆∞u v√†o th∆∞ m·ª•c: {OUTPUT_DIR}")
    print("=" * 50)
    
    # T·∫°o th∆∞ m·ª•c output
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    # UDP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((HOST, UDP_PORT))
    
    # Audio buffer
    audio_buffer = bytearray()
    is_recording = False
    recording_start_time = 0
    packet_count = 0
    
    print("üé§ S·∫µn s√†ng ghi √¢m! N√≥i g√¨ ƒë√≥ ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
    
    try:
        while True:
            data, addr = sock.recvfrom(2048)
            packet_count += 1
            
            if packet_count % 100 == 0:
                print(f"üì¶ Nh·∫≠n {packet_count} packets...")
            
            if len(data) <= 12:
                continue
            
            # Parse header ESP32
            try:
                seq, time_ms, codec, len_b2, len_b1, len_b0 = struct.unpack_from("<IIBBBB", data, 0)
                length = (len_b2 << 16) | (len_b1 << 8) | len_b0
                payload = data[12:12+length]
                
                if len(payload) == length:
                    # Ki·ªÉm tra speech detection
                    if len(payload) >= 2:
                        samples = struct.unpack(f"<{len(payload)//2}h", payload)
                        rms = (sum(s*s for s in samples) / len(samples)) ** 0.5
                        max_amp = max(abs(s) for s in samples)
                        
                        # Speech detection threshold - T·ªëi ∆∞u cho INMP441
                        is_speech = (
                            rms > 150 or  # Gi·∫£m t·ª´ 200 xu·ªëng 150
                            max_amp > 800 or  # Gi·∫£m t·ª´ 1000 xu·ªëng 800
                            any(abs(s) > 600 for s in samples) or  # Gi·∫£m t·ª´ 800 xu·ªëng 600
                            # Th√™m ƒëi·ªÅu ki·ªán m·ªõi: c√≥ √≠t nh·∫•t 20% samples m·∫°nh
                            sum(1 for s in samples if abs(s) > 500) > len(samples) * 0.2
                        )
                        
                        if is_speech and not is_recording:
                            # B·∫Øt ƒë·∫ßu ghi √¢m
                            is_recording = True
                            recording_start_time = time.time()
                            audio_buffer.clear()
                            print(f"üé§ B·∫Øt ƒë·∫ßu ghi √¢m! RMS={rms:.0f}, Max={max_amp}")
                        
                        if is_recording:
                            # Th√™m audio v√†o buffer
                            audio_buffer.extend(payload)
                            
                            # Ki·ªÉm tra th·ªùi gian ghi √¢m
                            elapsed_time = time.time() - recording_start_time
                            if elapsed_time >= RECORDING_DURATION:
                                # K·∫øt th√∫c ghi √¢m
                                is_recording = False
                                
                                # T·∫°o filename v·ªõi timestamp v√† th√¥ng tin audio
                                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                                rms_str = f"rms{int(rms)}"
                                max_str = f"max{int(max_amp)}"
                                filename = f"test_recording_{timestamp}_{rms_str}_{max_str}.wav"
                                
                                print(f"‚èπÔ∏è K·∫øt th√∫c ghi √¢m: {elapsed_time:.1f}s")
                                print(f"üìä Buffer size: {len(audio_buffer)} bytes")
                                print(f"üìä Final audio stats: RMS={rms:.0f}, Max={max_amp}")
                                
                                # L∆∞u raw audio
                                raw_filename = f"raw_{filename}"
                                raw_audio_data = bytes(audio_buffer)
                                save_audio_to_wav(raw_audio_data, raw_filename)
                                
                                # L∆∞u processed audio
                                processed_audio_data = audio_preprocessing_improved(raw_audio_data)
                                processed_filename = f"processed_{filename}"
                                save_audio_to_wav(processed_audio_data, processed_filename)
                                
                                print(f"‚úÖ ƒê√£ l∆∞u 2 files:")
                                print(f"   ‚Ä¢ Raw: {raw_filename}")
                                print(f"   ‚Ä¢ Processed: {processed_filename}")
                                
                                # ===== SPEECH RECOGNITION =====
                                print("üé§ B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng gi·ªçng n√≥i...")
                                
                                # Test v·ªõi raw audio tr∆∞·ªõc
                                print(f"üîç Testing v·ªõi raw audio...")
                                raw_transcription = transcribe_audio_with_google(
                                    os.path.join(OUTPUT_DIR, raw_filename)
                                )
                                
                                # L∆∞u k·∫øt qu·∫£ raw audio
                                save_transcription_to_txt(
                                    raw_transcription, 
                                    raw_filename, 
                                    OUTPUT_DIR
                                )
                                
                                # Test v·ªõi processed audio
                                print(f"üîç Testing v·ªõi processed audio...")
                                processed_transcription = transcribe_audio_with_google(
                                    os.path.join(OUTPUT_DIR, processed_filename)
                                )
                                
                                # L∆∞u k·∫øt qu·∫£ processed audio
                                save_transcription_to_txt(
                                    processed_transcription, 
                                    processed_filename, 
                                    OUTPUT_DIR
                                )
                                
                                # So s√°nh k·∫øt qu·∫£
                                print("üìä K·∫æT QU·∫¢ SO S√ÅNH:")
                                print(f"   ‚Ä¢ Raw audio: {'‚úÖ' if raw_transcription else '‚ùå'} {raw_transcription[:50] if raw_transcription else 'Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c'}")
                                print(f"   ‚Ä¢ Processed audio: {'‚úÖ' if processed_transcription else '‚ùå'} {processed_transcription[:50] if processed_transcription else 'Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c'}")
                                
                                if raw_transcription and processed_transcription:
                                    if raw_transcription == processed_transcription:
                                        print("üéØ K·∫øt qu·∫£ gi·ªëng nhau - Audio processing kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn nh·∫≠n d·∫°ng")
                                    else:
                                        print("üîÑ K·∫øt qu·∫£ kh√°c nhau - Audio processing c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn nh·∫≠n d·∫°ng")
                                elif raw_transcription and not processed_transcription:
                                    print("‚ö†Ô∏è Raw audio nh·∫≠n d·∫°ng ƒë∆∞·ª£c nh∆∞ng processed audio kh√¥ng - Audio processing c√≥ th·ªÉ qu√° aggressive")
                                elif not raw_transcription and processed_transcription:
                                    print("üéâ Processed audio nh·∫≠n d·∫°ng ƒë∆∞·ª£c nh∆∞ng raw audio kh√¥ng - Audio processing c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng!")
                                else:
                                    print("‚ùå C·∫£ hai ƒë·ªÅu kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c - C·∫ßn ki·ªÉm tra audio quality")
                                
                                print("=" * 50)
                                print("üé§ S·∫µn s√†ng ghi √¢m ti·∫øp theo! N√≥i g√¨ ƒë√≥...")
                                
                                # Reset buffer
                                audio_buffer.clear()
                        
            except struct.error as e:
                # N·∫øu kh√¥ng parse ƒë∆∞·ª£c header, coi nh∆∞ raw audio
                if is_recording:
                    audio_buffer.extend(data)
                    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è D·ª´ng ghi √¢m...")
        sock.close()
        print("‚úÖ ƒê√£ d·ª´ng UDP Audio Recorder")

if __name__ == "__main__":
    print("üöÄ Audio Test Recorder - Ghi √¢m test ƒë·ªÉ diagnose Google Speech")
    print(f"üì° UDP Port: {UDP_PORT}")
    print(f"‚è±Ô∏è Recording Duration: {RECORDING_DURATION}s")
    print(f"üìÅ Output Directory: {OUTPUT_DIR}")
    print("=" * 50)
    print("üîß IMPROVED AUDIO PREPROCESSING:")
    print(f"   ‚Ä¢ Band-pass filter: 80Hz - 7.5kHz (Butterworth, order=4)")
    print(f"   ‚Ä¢ Professional noise reduction: noisereduce library")
    print(f"   ‚Ä¢ Audio normalization: 95% max volume")
    print(f"   ‚Ä¢ Sample rate: {SAMPLE_RATE}Hz")
    print("=" * 50)
    print("üé§ SPEECH RECOGNITION FEATURES:")
    print(f"   ‚Ä¢ Google Speech API integration")
    print(f"   ‚Ä¢ Test both raw and processed audio")
    print(f"   ‚Ä¢ Save results to TXT files")
    print(f"   ‚Ä¢ Compare recognition accuracy")
    print(f"   ‚Ä¢ Language: Vietnamese (vi-VN)")
    print("=" * 50)
    print("üìö Required libraries:")
    print(f"   ‚Ä¢ noisereduce: Professional noise reduction")
    print(f"   ‚Ä¢ scipy.signal: High-quality Butterworth filters")
    print(f"   ‚Ä¢ numpy: Audio processing")
    print(f"   ‚Ä¢ speech_recognition: Google Speech API")
    print("=" * 50)
    print("üèóÔ∏è MODULAR ARCHITECTURE:")
    print(f"   ‚Ä¢ audio_processing: Audio preprocessing functions")
    print(f"   ‚Ä¢ speech_recognition: Google Speech API integration")
    print(f"   ‚Ä¢ file_utils: WAV and TXT file handling")
    print(f"   ‚Ä¢ dependencies: Library dependency checker")
    print("=" * 50)
    
    # Ki·ªÉm tra dependencies
    if not check_audio_dependencies():
        print("‚ùå Thi·∫øu dependencies, vui l√≤ng c√†i ƒë·∫∑t tr∆∞·ªõc")
        print("üì¶ C√°c l·ªánh c√†i ƒë·∫∑t:")
        for cmd in get_installation_commands():
            print(f"   ‚Ä¢ {cmd}")
        exit(1)
    
    try:
        udp_audio_recorder()
    except KeyboardInterrupt:
        print("\nüëã T·∫°m bi·ªát!") 