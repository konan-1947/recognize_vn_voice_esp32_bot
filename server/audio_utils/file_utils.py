#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
File Utilities Module
Chứa các hàm xử lý file chung cho server
"""

import os
import wave
import numpy as np
from datetime import datetime

def save_audio_to_wav(audio_data, filename, output_dir="test_recordings", 
                      sample_rate=16000, channels=1, sample_width=2):
    """
    Lưu audio data thành file WAV với thông tin chi tiết
    
    Args:
        audio_data (bytes): Audio data dạng bytes
        filename (str): Tên file WAV
        output_dir (str): Thư mục output
        sample_rate (int): Sample rate (mặc định: 16000)
        channels (int): Số kênh (mặc định: 1 - mono)
        sample_width (int): Độ rộng sample (mặc định: 2 - 16-bit)
    
    Returns:
        str: Đường dẫn đến file WAV đã tạo, hoặc None nếu lỗi
    """
    try:
        # Đảm bảo audio data có độ dài chẵn (16-bit = 2 bytes)
        if len(audio_data) % 2 != 0:
            audio_data = audio_data[:-1]
        
        # Tạo file WAV
        wav_path = os.path.join(output_dir, filename)
        with wave.open(wav_path, 'wb') as wav_file:
            wav_file.setnchannels(channels)
            wav_file.setsampwidth(sample_width)
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(audio_data)
        
        # Tính toán thống kê audio
        samples = np.frombuffer(audio_data, dtype=np.int16)
        rms = np.sqrt(np.mean(samples.astype(np.float32)**2))
        max_amplitude = np.max(np.abs(samples))
        min_amplitude = np.min(np.abs(samples))
        duration = len(samples) / sample_rate
        
        print(f"💾 WAV file saved: {wav_path}")
        print(f"📊 Audio stats:")
        print(f"   • Size: {len(audio_data)} bytes")
        print(f"   • Samples: {len(samples)}")
        print(f"   • Duration: {duration:.2f}s")
        print(f"   • RMS: {rms:.1f}")
        print(f"   • Max amplitude: {max_amplitude}")
        print(f"   • Min amplitude: {min_amplitude}")
        print(f"   • Dynamic range: {20 * np.log10(max_amplitude / max(1, min_amplitude)):.1f} dB")
        
        return wav_path
        
    except Exception as e:
        print(f"❌ Lỗi lưu WAV file: {e}")
        return None

def save_transcription_to_txt(transcription, filename, output_dir="test_recordings"):
    """
    Lưu kết quả nhận dạng vào file txt
    
    Args:
        transcription (str): Text đã được nhận dạng
        filename (str): Tên file gốc (để tạo tên file txt)
        output_dir (str): Thư mục output
    
    Returns:
        str: Đường dẫn đến file txt đã tạo, hoặc None nếu lỗi
    """
    try:
        # Tạo tên file txt
        txt_filename = filename.replace('.wav', '.txt')
        txt_path = os.path.join(output_dir, txt_filename)
        
        # Lưu transcription
        with open(txt_path, 'w', encoding='utf-8') as f:
            f.write(f"Transcription Result\n")
            f.write(f"=" * 50 + "\n")
            f.write(f"File: {filename}\n")
            f.write(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"=" * 50 + "\n\n")
            
            if transcription:
                f.write(f"✅ RECOGNIZED TEXT:\n")
                f.write(f"{transcription}\n")
            else:
                f.write(f"❌ NO TEXT RECOGNIZED\n")
                f.write(f"Audio có thể quá yếu, có tiếng ồn cao, hoặc không có giọng nói\n")
            
            f.write(f"\n" + "=" * 50 + "\n")
            f.write(f"Generated by Audio Test Recorder\n")
        
        print(f"💾 Transcription saved: {txt_path}")
        return txt_path
        
    except Exception as e:
        print(f"❌ Lỗi lưu transcription: {e}")
        return None 