#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TTS Utils - Simple Text-to-Speech utility
Ch·ªâ nh·∫≠n chu·ªói v√†o v√† tr·∫£ v·ªÅ file √¢m thanh
"""

import os
import tempfile
import time
from gtts import gTTS
try:
    import pygame
    PYGAME_AVAILABLE = True
except ImportError:
    PYGAME_AVAILABLE = False
    print("‚ö†Ô∏è pygame kh√¥ng c√≥, s·∫Ω s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p fallback")

def text_to_audio_file(text, language='vi', slow=False, output_dir=None):
    """
    Chuy·ªÉn ƒë·ªïi text th√†nh file √¢m thanh MP3
    
    Args:
        text (str): VƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi
        language (str): Ng√¥n ng·ªØ (vi: ti·∫øng Vi·ªát, en: ti·∫øng Anh)
        slow (bool): T·ªëc ƒë·ªô ƒë·ªçc (False: b√¨nh th∆∞·ªùng, True: ch·∫≠m)
        output_dir (str): Th∆∞ m·ª•c l∆∞u file (m·∫∑c ƒë·ªãnh: temp)
        
    Returns:
        str: ƒê∆∞·ªùng d·∫´n file √¢m thanh ƒë√£ t·∫°o ho·∫∑c None n·∫øu l·ªói
    """
    try:
        if not text or not text.strip():
            print("‚ö†Ô∏è TTS: Text r·ªóng, b·ªè qua")
            return None
        
        # T·∫°o ƒë·ªëi t∆∞·ª£ng gTTS
        tts = gTTS(text=text.strip(), lang=language, slow=slow)
        
        # T·∫°o ƒë∆∞·ªùng d·∫´n file output
        if not output_dir:
            output_dir = tempfile.gettempdir()
        
        timestamp = int(time.time() * 1000)
        output_file = os.path.join(output_dir, f"tts_{timestamp}.mp3")
        
        # L∆∞u file √¢m thanh
        tts.save(output_file)
        print(f"‚úÖ TTS: ƒê√£ t·∫°o file: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå TTS: L·ªói t·∫°o file audio: {e}")
        return None

def convert_mp3_to_wav(mp3_file, wav_file=None):
    """
    Chuy·ªÉn ƒë·ªïi file MP3 sang WAV ƒë·ªÉ ESP32 c√≥ th·ªÉ ph√°t
    S·ª≠ d·ª•ng miniaudio ƒë·ªÉ decode MP3 v√† wave ƒë·ªÉ ghi WAV
    
    Args:
        mp3_file (str): ƒê∆∞·ªùng d·∫´n file MP3
        wav_file (str): ƒê∆∞·ªùng d·∫´n file WAV output (t√πy ch·ªçn)
        
    Returns:
        str: ƒê∆∞·ªùng d·∫´n file WAV ho·∫∑c None n·∫øu l·ªói
    """
    try:
        import miniaudio
        import wave
        import numpy as np
        
        if not os.path.exists(mp3_file):
            print(f"‚ùå File MP3 kh√¥ng t·ªìn t·∫°i: {mp3_file}")
            return None
        
        # T·∫°o t√™n file WAV n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
        if not wav_file:
            base_name = os.path.splitext(mp3_file)[0]
            wav_file = f"{base_name}.wav"
        
        # Decode MP3 th√†nh PCM
        decoded = miniaudio.decode_file(mp3_file)
        print(f"üìä MP3 Info - Sample rate: {decoded.sample_rate}, Channels: {decoded.nchannels}, Sample width: {decoded.sample_width} bytes")
        
        # Convert sang format t∆∞∆°ng th√≠ch v·ªõi ESP32 n·∫øu c·∫ßn
        samples = decoded.samples
        sample_rate = decoded.sample_rate
        nchannels = decoded.nchannels
        sample_width = decoded.sample_width
        
        # Chuy·ªÉn sang 16kHz mono 16-bit n·∫øu c·∫ßn thi·∫øt
        if decoded.nchannels > 1 or decoded.sample_rate != 16000:
            # Convert numpy array ƒë·ªÉ x·ª≠ l√Ω
            if decoded.sample_width == 2:  # 16-bit
                audio_array = np.frombuffer(samples, dtype=np.int16)
            elif decoded.sample_width == 4:  # 32-bit
                audio_array = np.frombuffer(samples, dtype=np.int32)
                # Convert v·ªÅ 16-bit
                audio_array = (audio_array / 65536).astype(np.int16)
            else:
                audio_array = np.frombuffer(samples, dtype=np.int16)
            
            # Chuy·ªÉn sang mono n·∫øu stereo
            if decoded.nchannels == 2:
                audio_array = audio_array.reshape(-1, 2)
                audio_array = np.mean(audio_array, axis=1).astype(np.int16)
                nchannels = 1
            
            # Resample v·ªÅ 16kHz n·∫øu c·∫ßn (ƒë∆°n gi·∫£n b·∫±ng c√°ch skip samples)
            if decoded.sample_rate != 16000:
                ratio = decoded.sample_rate / 16000
                new_length = int(len(audio_array) / ratio)
                indices = np.linspace(0, len(audio_array) - 1, new_length).astype(int)
                audio_array = audio_array[indices]
                sample_rate = 16000
            
            samples = audio_array.tobytes()
            sample_width = 2  # 16-bit
        
        # Ghi ra file WAV
        with wave.open(wav_file, "wb") as wf:
            wf.setnchannels(nchannels)
            wf.setsampwidth(sample_width)
            wf.setframerate(sample_rate)
            wf.writeframes(samples)
        
        print(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi MP3 -> WAV: {wav_file} (Rate: {sample_rate}Hz, Channels: {nchannels}, Width: {sample_width} bytes)")
        return wav_file
        
    except ImportError:
        print("‚ùå C·∫ßn c√†i ƒë·∫∑t miniaudio: pip install miniaudio")
        return None
    except Exception as e:
        print(f"‚ùå L·ªói chuy·ªÉn ƒë·ªïi MP3 -> WAV: {e}")
        return None

def play_audio_file(audio_file):
    """
    Ph√°t file √¢m thanh tr·ª±c ti·∫øp kh√¥ng m·ªü media player
    
    Args:
        audio_file (str): ƒê∆∞·ªùng d·∫´n file √¢m thanh
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng
    """
    try:
        if not os.path.exists(audio_file):
            print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {audio_file}")
            return False
        
        if PYGAME_AVAILABLE:
            # S·ª≠ d·ª•ng pygame ƒë·ªÉ ph√°t audio tr·ª±c ti·∫øp
            try:
                pygame.mixer.init()
                pygame.mixer.music.load(audio_file)
                pygame.mixer.music.play()
                
                # ƒê·ª£i ph√°t xong
                while pygame.mixer.music.get_busy():
                    pygame.time.wait(100)
                
                pygame.mixer.quit()
                print(f"üîä ƒê√£ ph√°t audio: {os.path.basename(audio_file)}")
                return True
                
            except Exception as e:
                print(f"‚ùå L·ªói pygame: {e}, fallback sang Windows API")
                # Fallback n·∫øu pygame l·ªói
        
        # Fallback: S·ª≠ d·ª•ng Windows API ƒë·ªÉ ph√°t √¢m thanh im l·∫∑ng
        import winsound
        winsound.PlaySound(audio_file, winsound.SND_FILENAME)
        print(f"üîä ƒê√£ ph√°t audio (winsound): {os.path.basename(audio_file)}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói ph√°t audio: {e}")
        return False

def text_to_speech_esp32(text, esp32_ip="192.168.1.18", esp32_port=8080, language='vi', slow=False):
    """
    Chuy·ªÉn text th√†nh √¢m thanh v√† g·ª≠i t·ªõi ESP32 thay v√¨ ph√°t t·ª´ loa m√°y t√≠nh
    
    Args:
        text (str): VƒÉn b·∫£n c·∫ßn ƒë·ªçc
        esp32_ip (str): IP c·ªßa ESP32
        esp32_port (int): Port TCP c·ªßa ESP32
        language (str): Ng√¥n ng·ªØ
        slow (bool): T·ªëc ƒë·ªô ƒë·ªçc
        
    Returns:
        bool: True n·∫øu g·ª≠i th√†nh c√¥ng
    """
    try:
        # Import ESP32AudioSender t·ª´ c√πng package
        from .esp32_audio_sender import send_audio_to_esp32_async
        
        # T·∫°o file MP3
        mp3_file = text_to_audio_file(text, language, slow)
        if not mp3_file:
            return False
        
        # Chuy·ªÉn ƒë·ªïi MP3 -> WAV
        wav_file = convert_mp3_to_wav(mp3_file)
        if not wav_file:
            return False
        
        # G·ª≠i WAV t·ªõi ESP32 b·∫•t ƒë·ªìng b·ªô
        def on_success(file_path):
            print(f"‚úÖ ƒê√£ g·ª≠i TTS t·ªõi ESP32: {os.path.basename(file_path)}")
            # D·ªçn d·∫πp file t·∫°m
            try:
                os.remove(mp3_file)
                os.remove(wav_file)
            except:
                pass
        
        def on_error(error_msg):
            print(f"‚ùå L·ªói g·ª≠i TTS t·ªõi ESP32: {error_msg}")
            # D·ªçn d·∫πp file t·∫°m
            try:
                os.remove(mp3_file)
                os.remove(wav_file)
            except:
                pass
        
        # G·ª≠i b·∫•t ƒë·ªìng b·ªô
        thread = send_audio_to_esp32_async(wav_file, esp32_ip, esp32_port, on_success, on_error)
        print(f"üîä ƒê√£ g·ª≠i TTS '{text[:50]}...' t·ªõi ESP32")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói TTS -> ESP32: {e}")
        return False

def text_to_speech(text, language='vi', slow=False, auto_play=True, esp32_mode=False, esp32_ip="192.168.1.18", esp32_port=8080):
    """
    Chuy·ªÉn text th√†nh √¢m thanh v√† t·ª± ƒë·ªông ph√°t HO·∫∂C g·ª≠i t·ªõi ESP32
    
    Args:
        text (str): VƒÉn b·∫£n c·∫ßn ƒë·ªçc
        language (str): Ng√¥n ng·ªØ
        slow (bool): T·ªëc ƒë·ªô ƒë·ªçc
        auto_play (bool): T·ª± ƒë·ªông ph√°t sau khi t·∫°o (ch·ªâ khi esp32_mode=False)
        esp32_mode (bool): N·∫øu True, g·ª≠i t·ªõi ESP32 thay v√¨ ph√°t t·ª´ loa m√°y t√≠nh
        esp32_ip (str): IP c·ªßa ESP32 (khi esp32_mode=True)
        esp32_port (int): Port TCP c·ªßa ESP32 (khi esp32_mode=True)
        
    Returns:
        str|bool: ƒê∆∞·ªùng d·∫´n file √¢m thanh (local mode) ho·∫∑c True/False (ESP32 mode)
    """
    if esp32_mode:
        # G·ª≠i t·ªõi ESP32
        return text_to_speech_esp32(text, esp32_ip, esp32_port, language, slow)
    else:
        # Ch·∫ø ƒë·ªô c≈©: ph√°t t·ª´ loa m√°y t√≠nh
        audio_file = text_to_audio_file(text, language, slow)
        
        if audio_file and auto_play:
            play_audio_file(audio_file)
        
        return audio_file