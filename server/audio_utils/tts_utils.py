#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TTS Utils - Simple Text-to-Speech utility
Ch·ªâ nh·∫≠n chu·ªói v√†o v√† tr·∫£ v·ªÅ file √¢m thanh
"""

import os
import tempfile
import time
from gtts import gTTS
try:
    import pygame
    PYGAME_AVAILABLE = True
except ImportError:
    PYGAME_AVAILABLE = False
    print("‚ö†Ô∏è pygame kh√¥ng c√≥, s·∫Ω s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p fallback")

def text_to_audio_file(text, language='vi', slow=False, output_dir=None):
    """
    Chuy·ªÉn ƒë·ªïi text th√†nh file √¢m thanh MP3
    
    Args:
        text (str): VƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi
        language (str): Ng√¥n ng·ªØ (vi: ti·∫øng Vi·ªát, en: ti·∫øng Anh)
        slow (bool): T·ªëc ƒë·ªô ƒë·ªçc (False: b√¨nh th∆∞·ªùng, True: ch·∫≠m)
        output_dir (str): Th∆∞ m·ª•c l∆∞u file (m·∫∑c ƒë·ªãnh: temp)
        
    Returns:
        str: ƒê∆∞·ªùng d·∫´n file √¢m thanh ƒë√£ t·∫°o ho·∫∑c None n·∫øu l·ªói
    """
    try:
        if not text or not text.strip():
            print("‚ö†Ô∏è TTS: Text r·ªóng, b·ªè qua")
            return None
        
        # T·∫°o ƒë·ªëi t∆∞·ª£ng gTTS
        tts = gTTS(text=text.strip(), lang=language, slow=slow)
        
        # T·∫°o ƒë∆∞·ªùng d·∫´n file output
        if not output_dir:
            output_dir = tempfile.gettempdir()
        
        timestamp = int(time.time() * 1000)
        output_file = os.path.join(output_dir, f"tts_{timestamp}.mp3")
        
        # L∆∞u file √¢m thanh
        tts.save(output_file)
        print(f"‚úÖ TTS: ƒê√£ t·∫°o file: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå TTS: L·ªói t·∫°o file audio: {e}")
        return None

def play_audio_file(audio_file):
    """
    Ph√°t file √¢m thanh tr·ª±c ti·∫øp kh√¥ng m·ªü media player
    
    Args:
        audio_file (str): ƒê∆∞·ªùng d·∫´n file √¢m thanh
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng
    """
    try:
        if not os.path.exists(audio_file):
            print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {audio_file}")
            return False
        
        if PYGAME_AVAILABLE:
            # S·ª≠ d·ª•ng pygame ƒë·ªÉ ph√°t audio tr·ª±c ti·∫øp
            try:
                pygame.mixer.init()
                pygame.mixer.music.load(audio_file)
                pygame.mixer.music.play()
                
                # ƒê·ª£i ph√°t xong
                while pygame.mixer.music.get_busy():
                    pygame.time.wait(100)
                
                pygame.mixer.quit()
                print(f"üîä ƒê√£ ph√°t audio: {os.path.basename(audio_file)}")
                return True
                
            except Exception as e:
                print(f"‚ùå L·ªói pygame: {e}, fallback sang Windows API")
                # Fallback n·∫øu pygame l·ªói
        
        # Fallback: S·ª≠ d·ª•ng Windows API ƒë·ªÉ ph√°t √¢m thanh im l·∫∑ng
        import winsound
        winsound.PlaySound(audio_file, winsound.SND_FILENAME)
        print(f"üîä ƒê√£ ph√°t audio (winsound): {os.path.basename(audio_file)}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói ph√°t audio: {e}")
        return False

def text_to_speech(text, language='vi', slow=False, auto_play=True):
    """
    Chuy·ªÉn text th√†nh √¢m thanh v√† t·ª± ƒë·ªông ph√°t
    
    Args:
        text (str): VƒÉn b·∫£n c·∫ßn ƒë·ªçc
        language (str): Ng√¥n ng·ªØ
        slow (bool): T·ªëc ƒë·ªô ƒë·ªçc
        auto_play (bool): T·ª± ƒë·ªông ph√°t sau khi t·∫°o
        
    Returns:
        str: ƒê∆∞·ªùng d·∫´n file √¢m thanh
    """
    audio_file = text_to_audio_file(text, language, slow)
    
    if audio_file and auto_play:
        play_audio_file(audio_file)
    
    return audio_file